'''
Authenticated encryption modes (GCM, CCM, EAX, SIV, OCB)
Accelerated AES on Intel platforms via AES-NI
First class support for PyPy
Elliptic curves cryptography (NIST P-curves; Ed25519, Ed448)
Better and more compact API (nonce and iv attributes for ciphers, automatic generation of random nonces and IVs, simplified CTR cipher mode, and more)
SHA-3 (including SHAKE XOFs) and BLAKE2 hash algorithms
Salsa20 and ChaCha20 stream ciphers
scrypt and HKDF
Deterministic (EC)DSA and EdDSA
Password-protected PKCS#8 key containers
Shamirâ€™s Secret Sharing scheme
Random numbers get sourced directly from the OS (and not from a CSPRNG in userspace)
Simplified install process, including better support for Windows
Cleaner RSA and DSA key generation (largely based on FIPS 186-4)
Major clean ups and simplification of the code base

pip install pycryptodome
'''

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes

key = get_random_bytes(16)  # generate a random 16-byte key
cipher = AES.new(key, AES.MODE_EAX)

message = b'This is a secret message.'
ciphertext, tag = cipher.encrypt_and_digest(message)

print(ciphertext)

cipher = AES.new(key, AES.MODE_EAX, nonce=cipher.nonce)
# nonce is generated by the cipher object.
decrypted_message = cipher.decrypt_and_verify(ciphertext, tag)

print(decrypted_message.decode())
